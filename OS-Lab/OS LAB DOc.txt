LAB 1


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
int main(int argc, char** argv) {
    int c,d,e,f,g,h;
    c = fork();
    d = fork();
    e = fork();
    f = fork();
    g = 50;
    h = 5;
    if (c == 0 && d > 0 && e>0 && f>0) 
    {  
        printf("addition %d \n",g+h); 
        printf(" my id is %d \n", getpid()); 
        printf(" my parentid is %d \n", getppid()); 
    }
    else if (c > 0 && d == 0 && e>0 && f>0) 
    { 
        printf("subtraction %d \n",g-h); 
        printf(" my id is %d \n", getpid()); 
        printf(" my parentid is %d \n", getppid()); 
    }
    else if (c > 0 && d > 0 && e==0 && f>0) 
    { 
        printf("multiplication %d \n",g*h); 
        printf(" my id is %d \n", getpid()); 
        printf(" my parentid is %d \n", getppid()); 
    }
    else if (c > 0 && d > 0 && e>0 && f==0) 
    {
        printf("division %d \n",g/h); 
        printf(" my id is %d \n", getpid()); 
        printf(" my parentid is %d \n", getppid()); 
    }
    return (EXIT_SUCCESS);
}


LAB 2

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <fcntl.h>

int main(int argc, char** argv) 
{
    int readline,writeline,f1,f2;
    char buffer[150];
    f1 = open("new.txt",O_RDONLY);
    f2 = open("destination.txt",O_WRONLY);
    while(readline=read(f1,buffer,1)>0){
        writeline = write(f2,buffer,1); /* here if we use sizeof(buffer) then it exceeds the read of the file so use 1 to read one at a time.*/
    }
    if(readline<0 || writeline<0)
    {
        printf("Error ocurred!!");
    }
    else
    {
        printf("Message coppied!!");
    }
    close(f1);
    close(f2);
        return (EXIT_SUCCESS);
}

LAB 3

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NO_OF_THREADS 3

void *showHelloWorld(){
    printf("Hello World\n");
    pthread_exit(NULL);
}

int main(int argc, char** argv) {
    pthread_t thread[NO_OF_THREADS];
    int rc;
    for(int i=0;i<NO_OF_THREADS;i++){
        rc = pthread_create(&thread[i], NULL, showHelloWorld, NULL);
        if(rc){
            printf("An error occured!");
        }
    }
    return (EXIT_SUCCESS);
}


LAB 3.1

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
int add(int *l){
    int sum=0;
    for(int i=0;i<5;i++){
        sum = sum + l[i];
    }
    pthread_exit(sum);
}
    
int main() {
    int n,s,t[5],k[5];
    pthread_t thr1;
    pthread_t thr2;
    printf("Enter marks of student1\n");
    for(int i=0;i<5;i++){
        scanf("%d",&t[i]);
    }
    n = pthread_create(&thr1,NULL,add,t);
    int *sum;
    pthread_join(thr1, &sum);   
    printf("total marks of student 1 is %p \n",sum);
    printf("Enter marks of second student\n");
    for(int i=0;i<5;i++)
    {
        scanf("%d",&k[i]);
    }
    s = pthread_create(&thr2,NULL,add,k);
    int sum1;
    pthread_join(thr2, &sum1);   
    printf("total marks of student2 is %d\n",sum1);
    if(sum>sum1)
        printf("Student1 scores more marks\n");
    else
        printf("Student2 scores more marks\n");
        
    return (EXIT_SUCCESS);
}


LAB 3.2

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NO_OF_SUBJECTS 5
struct person{
    float subject[5];
    float sum;
}stud[2];
typedef struct person student;

void getMarks(student *x){
    printf("Enter the marks: \n");
    for(int i=0; i<NO_OF_SUBJECTS;i++){
            scanf("%f", &x->subject[i]);
    }
}
void *addMarks(student *x){
        x->sum = 0;
        for(int i=0; i<NO_OF_SUBJECTS;i++){
            x->sum+=x->subject[i];
        }
        printf("Total for student=%f\n",x->sum);
        return NULL;
        pthread_exit(NULL);
}
int main(int argc, char** argv) {
    getMarks(&stud[0]);
    getMarks(&stud[1]);
    printf("Creating two threads\n");
    int rc;
    pthread_t threads[2];
    for(int i=0;i<2;i++){
        rc = pthread_create(&threads[i], NULL, addMarks, &stud[i]);
    }
    void *exitstatus[2];
    pthread_join(threads[0], exitstatus[0]);
    pthread_join(threads[1], exitstatus[1]);
    if(stud[0].sum>stud[1].sum)
        printf("Student 1 scored more");
    else
        printf("Student 2 scored more");
    return (EXIT_SUCCESS);
}


LAB 4

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
void *process1(void *arg){ //round robin algorithm
    int sum=0,*arg1=arg,var=0;
    int time_slice=2,i,n=5,bt[5],p[5],btv[5],wt[5],time=0,TAT[5];
    float avwt,avtat,total1=0,total2=0;
    for(i=0;i<n;i++){ //take burst time from main to thread 
        bt[i]=*arg1++; btv[i]=bt[i];  p[i]=i+1; 
    }
    while(var!=n){ //continue till all process are completed
    for(i=0;i<n;i++){ 
    if(bt[i]!=0){//if burst time is not zero
    if(bt[i]>time_slice){ //if burst time is more than time slice
        time=time+time_slice;
        bt[i]-=time_slice;//decrement burst time with time slice
    }
    else { //if burst time is less or equal to time slice
        time=time+bt[i];
        TAT[i]=time;
        bt[i]=0; //process completed
        var++; //increment var after completion of a process
    }
  }
    wt[i]=TAT[i]-btv[i];}}//waiting time
    for(i=0;i<5;i++){
    total1+=wt[i];//total waiting time
    total2+=TAT[i];//total turn around time
    }
    avwt=total1/5;//average waiting time
    avtat=total2/5;//average turn around time
    printf("calculation for round robin algorithm:\n");
    printf("time slice is %d\n",time_slice);
    printf("process\t\tburst time\t turnaround time\t waiting time\n");
   for(i=0;i<5;i++){ 
       printf("P[%d]\t\t%d\t\t %d\t\t\t %d\n\n",(i+1),btv[i],TAT[i],wt[i]);
   }
    printf("Average turnaround time is %.2f\n",avtat);
    printf("Average waiting time is %.2f\n",avwt);
    printf("---------------------------------------------\n\n");
   return NULL;}

void *process2(void *arg){
    //priority scheduling algorithm
    int n=5,i,pos,*arg2=arg,a[6];
    int bt[20],p[20],wt[20],tat[20],j,temp;
    float avg_wt,avg_tat,total=0;
    int prio[5]={4,24,6,32,7};//priority of process
    for(i=0;i<n;i++){ 
        bt[i]=*arg2++; p[i]=i+1;//take burst time from main to thread
    }
    for (i=0;i<n;i++){  
        a[i]=prio[i]; //copy priority to another array "a"
    }
    //sorting using selection sort in descending order
     for(i=0;i<n;i++){
        pos=i;
        for(j=i+1;j<n;j++) {
        if(prio[pos]<prio[j])//if selected number is less than other number
        pos=j; //assign that number to as selected number
        } 
    //priority sorting
        temp=prio[i];   prio[i]=prio[pos];   prio[pos]=temp;     
    //burst time positioning
        temp=bt[i];     bt[i]=bt[pos];       bt[pos]=temp; 
    //process number positioning
        temp=p[i];      p[i]=p[pos];         p[pos]=temp;}
     wt[0]=0;//waiting time for first process is zero
    //calculate waiting time
    for(i=1;i<n;i++){
    wt[i]=0;
    for(j=0;j<i;j++)  wt[i]+=bt[j];  total+=wt[i];}
    avg_wt=total/n;      //average waiting time
    total=0;
    printf("calculation for priority scheduling algorithm:\n\n");
    printf("Process\t\tpriority\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for(i=0;i<n;i++){
    tat[i]=bt[i]+wt[i];     //calculate turnaround time
    total+=tat[i];
    printf("\nP[%d]\t\t%d\t\t%d\t\t%d\t\t%d\n",p[i],prio[i],bt[i],wt[i],tat[i]);}
    avg_tat=total/n;     //average turnaround time
    printf("\n\nAverage Turnaround Time=%.2f",avg_tat);
    printf("\nAverage Waiting Time=%.2f",avg_wt);
    printf("---------------------------------------------\n\n");
    return NULL;}
 
int main(int argc, char** argv) {
    pthread_t th_1;
    pthread_t th_2;
    int CPU_BT[5]={15,25,2,8,20};
         pthread_create(&th_1,NULL,process1,&CPU_BT[0]);
         pthread_join(th_1,NULL);
         pthread_create(&th_2,NULL,process2,&CPU_BT[0]);
         pthread_join(th_2,NULL);
    return (EXIT_SUCCESS);
}


LAb 5

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define max 30
int q[10], front = 0, rear = 0;
pthread_mutex_t mutex;
pthread_cond_t empty, full;

void produce() 
{
    int x = rand() % 15;
    if(rear==10)
        rear=0;
    q[rear++]=x;
    printf("produced value %d\n",x);
}
void *producer(void *arg) 
{
    for(int i=0;i<max;i++)
    {
        pthread_mutex_lock(&mutex);
        pthread_cond_wait(&empty, &mutex);
        produce();
        pthread_cond_signal(&full);
        pthread_mutex_unlock(&mutex);
    }
}
void consume()
{
    if(front==10)
        front=0;
    printf("removed value %d\n",q[front++]);
}

void *consumer(void *arg)
{
    for(int i=0;i<max;i++)
    {
        pthread_mutex_lock(&mutex);
        pthread_cond_wait(&full, &mutex);
        consume();
        pthread_cond_signal(&empty);
        pthread_mutex_unlock(&mutex);
    }
}
int main(int argc, char** argv) 
{
    pthread_mutex_init(&mutex, 0);
    pthread_cond_init(&full, NULL);
    pthread_cond_init(&empty, NULL);
    pthread_t th_1;
    pthread_t th_2;
    pthread_create(&th_1, NULL, producer, NULL);
    pthread_create(&th_2, NULL, consumer, NULL);
    pthread_join(th_1, NULL);
    pthread_join(th_2, NULL);
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&full);
    pthread_cond_destroy(&empty);
    return (EXIT_SUCCESS);
}


LAb 6
Semaphore

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#define N 5
#define Thinking 0
#define Eating 1
#define Hungry 2
#define Left (i + N - 1) % N
#define Right (i + 1) % N
int state[N];
sem_t mutex,phil[N];

void *Philosopher(int i) {
    state[i] = Thinking;
    printf("Philosopher %d is thinking\n", i + 1);
    sleep(2);
    take_fork(i);
    put_fork(i);
}

void take_fork(int i) {
    sem_wait(&mutex);
    state[i] = Hungry;
    printf("Philosopher %d is hungry\n", i + 1);
    test(i);
    sem_post(&mutex);
    sem_wait(&phil[i]);
}

void test(int i){
    if (state[i] == Hungry && state[Left] != Eating && state[Right] != Eating) {
        printf("Philosopher %d has taken fork and is eating\n", i + 1);
        state[i] = Eating;
        sem_post(&phil[i]);
    }
}

void put_fork(int i) {
    if(state[i]==Eating){
    sem_wait(&mutex);
    printf("Philosopher %d has put fork and is thinking\n", i + 1);
    state[i] = Thinking;
    test(Left);
    test(Right);
    sem_post(&mutex);
    }
}

/* Simulation of Philosopher's diner problem */
int main(int argc, char** argv) {
    sem_init(&mutex, 0, 1);
    pthread_t ph[N];
    for (int i = 0; i < N; i++){
        state[i] = Thinking;
        sem_init(&phil[i], 0, 0);
    }
    for (int i = 0; i < N; i++)
        pthread_create(&ph[i], NULL, Philosopher, i);
    for (int i = 0; i < N; i++)
        pthread_join(ph[i], NULL);
    return (EXIT_SUCCESS);
}


LAb 6 
Mutex
#include<stdio.h>
#include<semaphore.h>
#include<pthread.h>
#define N 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (ph_num+N-1)%N
#define RIGHT (ph_num+1)%N
sem_t mutex;
sem_t S[N];
void * philospher(void *num);
void take_fork(int);
void put_fork(int);
void test(int);
int state[N];
int phil_num[N]={0,1,2,3,4};
int main()
{
int i;
pthread_t thread_id[N];
sem_init(&mutex,0,1);
for(i=0;i<N;i++)
sem_init(&S[i],0,0);
for(i=0;i<N;i++)
{
pthread_create(&thread_id[i],NULL,philospher,&phil_num[i]);
printf("Philosopher %d is thinking\n",i+1);
}
for(i=0;i<N;i++)
pthread_join(thread_id[i],NULL);
}
void *philospher(void *num)
{
int *i = num;
sleep(1);
take_fork(*i);
sleep(0);
put_fork(*i);

}
void take_fork(int ph_num)
{
sem_wait(&mutex);
state[ph_num] = HUNGRY;
printf("Philosopher %d is Hungry\n",ph_num+1);
test(ph_num);
sem_post(&mutex);
sem_wait(&S[ph_num]);
sleep(1);
}
void test(int ph_num)
{
if (state[ph_num] == HUNGRY && state[LEFT] != EATING &&state[RIGHT] != EATING)
{
state[ph_num] = EATING;
sleep(2);
printf("Philosopher %d takes fork %d and %d\n",ph_num+1,LEFT+1,ph_num+1);
printf("Philosopher %d is Eating\n",ph_num+1);
sem_post(&S[ph_num]);
}
}
void put_fork(int ph_num)
{
sem_wait(&mutex);
state[ph_num] = THINKING;
printf("Philosopher %d putting fork %d and %d down\n",ph_num+1,LEFT+1,ph_num+1);
printf("Philosopher %d is thinking\n",ph_num+1);
test(LEFT);
test(RIGHT);
sem_post(&mutex);
}



LAb 7 

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
void bestFit(int blockSize[], int m, int processSize[], int n) 
{ 
    // Stores block id of the block allocated to a process 
    int allocation[n]; 
    // Initially no block is assigned to any process 
    memset(allocation, -1, sizeof(allocation)); 
  
    // pick each process and find suitable blocks 
    // according to its size ad assign to it 
    for (int i=0; i<n; i++) 
    { 
        // Find the best fit block for current process 
        int bestIdx = -1; 
        for (int j=0; j<m; j++) 
        { 
            if (blockSize[j] >= processSize[i]) 
            { 
                if (bestIdx == -1) 
                    bestIdx = j; 
                else if (blockSize[bestIdx] > blockSize[j]) 
                    bestIdx = j; 
            } 
        } 
  
        // If we could find a block for current process 
        if (bestIdx != -1) 
        { 
            // allocate block j to p[i] process 
            allocation[i] = bestIdx; 
  
            // Reduce available memory in this block. 
            blockSize[bestIdx] -= processSize[i]; 
        } 
    } 
  
    printf( "\nProcess No.\tProcess Size\tBlock no.\n"); 
    for (int i = 0; i < n; i++) 
    { 
        printf("%d\t\t%d\t\t",i+1, processSize[i]); 
        if (allocation[i] != -1) 
            printf("%d\n",allocation[i] + 1);
        else
            printf("Not Allocated"); 
        printf("\n");
    } 
} 
  

void firstFit(int blockSize[], int m,  int processSize[], int n) 
{ 
    // Stores block id of the  
    // block allocated to a process 
    int allocation[n]; 
  
    // Initially no block is assigned to any process 
    memset(allocation, -1, sizeof(allocation)); 
  
    // pick each process and find suitable blocks 
    // according to its size ad assign to it 
    for (int i = 0; i < n; i++) 
    { 
        for (int j = 0; j < m; j++) 
        { 
            if (blockSize[j] >= processSize[i]) 
            { 
                // allocate block j to p[i] process 
                allocation[i] = j; 
  
                // Reduce available memory in this block. 
                blockSize[j] -= processSize[i]; 
  
                break; 
            } 
        } 
    } 
  
    printf( "\nProcess No.\tProcess Size\tBlock no.\n"); 
    for (int i = 0; i < n; i++) 
    { 
        printf("%d\t\t%d\t\t",i+1, processSize[i]);  
        if (allocation[i] != -1) 
            printf("%d\n",allocation[i] + 1); 
        else
            printf("Not Allocated"); 
        printf("\n"); 
    } 
} 
void worstFit(int blockSize[], int m, int processSize[],  
                                                 int n) 
{ 
    // Stores block id of the block allocated to a 
    // process 
    int allocation[n]; 
  
    // Initially no block is assigned to any process 
    memset(allocation, -1, sizeof(allocation)); 
  
    // pick each process and find suitable blocks 
    // according to its size ad assign to it 
    for (int i=0; i<n; i++) 
    { 
        // Find the best fit block for current process 
        int wstIdx = -1; 
        for (int j=0; j<m; j++) 
        { 
            if (blockSize[j] >= processSize[i]) 
            { 
                if (wstIdx == -1) 
                    wstIdx = j; 
                else if (blockSize[wstIdx] < blockSize[j]) 
                    wstIdx = j; 
            } 
        } 
  
        // If we could find a block for current process 
        if (wstIdx != -1) 
        { 
            // allocate block j to p[i] process 
            allocation[i] = wstIdx; 
  
            // Reduce available memory in this block. 
            blockSize[wstIdx] -= processSize[i]; 
        } 
    } 
  
     printf( "\nProcess No.\tProcess Size\tBlock no.\n"); 
    for (int i = 0; i < n; i++) 
    { 
        printf("%d\t\t%d\t\t",i+1, processSize[i]);
        if (allocation[i] != -1) 
            printf("%d\n",allocation[i] + 1); 
        else
            printf("Not Allocated"); 
        printf("\n");
    } 
} 
// Driver code 
int main() 
{ 
    while(1){
    int blockSize[] = {100, 500, 200, 300, 600}; 
    int processSize[] = {212, 417, 112, 426}; 
    int m = sizeof(blockSize)/sizeof(blockSize[0]); 
    int n = sizeof(processSize)/sizeof(processSize[0]); 
  printf("1. Best fit\t2. First fit\t3. Worst fit\t4. Exit\nEnter an option\n");
    int choice;
    scanf("%d", &choice);
    switch(choice){
        case 1: bestFit(blockSize, m, processSize, n);
                break;
        case 2: firstFit(blockSize, m, processSize, n);
                break;
        case 3: worstFit(blockSize, m, processSize, n);
                break;
        case 4: exit(0);
        default: printf("Invalid input\n");
  
    } 
    }
    return 0 ; 
} 
